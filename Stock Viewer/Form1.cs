using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;


// This file is for handling everything to do wtih the load form

namespace Stock_Viewer
{
    public partial class Stock_Viewer_Load : Form
    {
        public Stock_Viewer_Load()
        {
            InitializeComponent();
            this.Text = "Stock Viewer Loader";
        }

        private List<smartCandlestick> this_forms_smartCandlesticks_list;   // Used to contain track of the current form's gathered candlesticks

        private Form2 form2;                                                // This form generates a Form2 that displays candlestick data for analysis upon using the load_CSV_data function below

        private void dateTimePicker_start_ValueChanged(object sender, EventArgs e)
        {
            // Check if the form's candlestick list is null or empty (no CSV file loaded)
            if (this_forms_smartCandlesticks_list == null || this_forms_smartCandlesticks_list.Count == 0)
            {
                MessageBox.Show("Please select a CSV file first.", "CSV File Not Selected", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return; // Exit the event handler
            }

            // Only select candlestick data from the selected range of dates
            DateTime startDate = dateTimePicker_start.Value.Date;
            DateTime endDate = dateTimePicker_end.Value.Date;
            var filtered_dates_data = this_forms_smartCandlesticks_list.Where(data => data.Date >= startDate && data.Date <= endDate).ToList();

            //Populate chart here and update to filtered candlesticks
            form2.populate_Chart_Daily(filtered_dates_data);
            form2.populate_Chart_Volume(filtered_dates_data);
            form2.populate_ComboBox_Patterns(filtered_dates_data);
        }

        private void dateTimePicker_end_ValueChanged(object sender, EventArgs e)
        {
            // Check if the form's candlestick list is null or empty (no CSV file loaded)
            if (this_forms_smartCandlesticks_list == null || this_forms_smartCandlesticks_list.Count == 0)
            {
                MessageBox.Show("Please select a CSV file first.", "CSV File Not Selected", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return; // Exit the event handler
            }

            // Only select candlestick data from the selected range of dates
            DateTime startDate = dateTimePicker_start.Value.Date;
            DateTime endDate = dateTimePicker_end.Value.Date;
            var filtered_dates_data = this_forms_smartCandlesticks_list.Where(data => data.Date >= startDate && data.Date <= endDate).ToList();

            //Populate chart here and update to filtered candlesticks
            form2.populate_Chart_Daily(filtered_dates_data);
            form2.populate_Chart_Volume(filtered_dates_data);
            form2.populate_ComboBox_Patterns(filtered_dates_data);
        }

        // Event for clicking on the load button in the load form
        private void button_load_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();                                       // Show file explorer to user
            fileDialog.Filter = "CSV Files| *.csv|Day|*Day.csv|Week|*Week.csv|Month|*Month.csv";    // Only look for CSV files with day/week/month tags
            fileDialog.Multiselect = true;                                                          
            if (fileDialog.ShowDialog() == DialogResult.OK)                                         // If no issues opening file(s), load each of the files
            {
                foreach (string filename in fileDialog.FileNames)
                {
                    load_CSV_data(filename);
                }
            }
        }

        // ---------    Functions not generated by Visual Studios    --------- //

        // This function handles parsing the contents of a CSV file into candlestick data to create smart candlesticks, storing them in a list of smart candlesticks, and opening the second form(s)
        private void load_CSV_data(string file_path) 
        {
            try {
                var smartCandlestick_list = new List<smartCandlestick>();
                using (var reader = new StreamReader(file_path)) {
                    reader.ReadLine();                                                              // Skips the first line of the CSV file, which are the headers
                    while (!reader.EndOfStream) {                                                   // Continue reading CSV file until there are no more contents
                        var line = reader.ReadLine(); var values = line.Split(',');                 // Read the line and split the line using commas as the delimiter. Stored in an array (values)

                        // ---------   Preparation for storing the date as a DateTime object    --------- //
                        string monthDay = values[2];                                                
                        string year = values[3];
                        string dateString = string.Empty;
                        dateString = monthDay + "," + year;
                        dateString = dateString.Replace("\"", "");
                        DateTime dateTime;

                        //Date format may be MM DD, YYYY. Store into dateTime variable.
                        if (DateTime.TryParseExact(dateString, "MMM dd, yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out dateTime))
                        {
                        }
                        //Date format may be MM D, YYYY. Store into dateTime variable.
                        else if (DateTime.TryParseExact(dateString, "MMM d, yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out dateTime))
                        {
                        }
                        //Invalid date format. Display error.
                        else
                        {
                            string errorMsg = "The date " + dateString + " does not match the format MM DD YYYY/MM D YYYY";
                            MessageBox.Show(errorMsg, "Date error");
                        }
                        // ---------   ^ Preparation for storing the date as a DateTime object ^    --------- //

                        var smartCandlestick_data = new smartCandlestick                            // Create a new smart candlestick and fill in properties using collected CSV data
                        {
                            Ticker = values[0],
                            Period = values[1],
                            Date = dateTime,
                            Open = double.Parse(values[4]),
                            High = double.Parse(values[5]),
                            Low = double.Parse(values[6]),
                            Close = double.Parse(values[7]),
                            Volume = int.Parse(values[8])
                        };
                        smartCandlestick_list.Add(smartCandlestick_data);                           // Add the new smart candlestick to the list of smart candlesticks
                    }
                    this_forms_smartCandlesticks_list = smartCandlestick_list;                      // Update the global list of smart candlesticks to be the candlesticks currently obtained
                                                                                                    // from the currently opened CSV file

                    form2 = new Form2(this_forms_smartCandlesticks_list);                           // Pass through the form's list of candlesticks to the next form to be opened and displayed
                    form2.Show();
                }
            }
            catch (Exception ex){
                MessageBox.Show("Error loading data" + ex.Message, "Error");
            }
        }
    }
}
